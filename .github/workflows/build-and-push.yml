name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare environment file
        run: cp .env.develop .env

      - name: Inject secret environment variables
        run: |
          {
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}";
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}";
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}";
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}";
          #  echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}";
          #  echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}";
          } >> .env

      - name: Sanitize & validate .env (build)
        shell: bash
        run: |
          set -euo pipefail
          ENV_FILE=".env"

          # 0) Normaliza CRLF -> LF y asegura salto de línea final
          sed -i 's/\r$//' "$ENV_FILE"
          gawk '1; END{ if (NR==0 || substr($0,length,1)!="\n") print "" }' "$ENV_FILE" \
            > /tmp/.env.fixed && mv /tmp/.env.fixed "$ENV_FILE"

          # 1) Quita espacios alrededor de "=" (KEY = value -> KEY=value)
          sed -i -E 's/^[[:space:]]*([A-Za-z_][A-Za-z0-9_]*)[[:space:]]*=[[:space:]]*/\1=/' "$ENV_FILE"

          # 2) Si el valor tiene espacios y no está entre comillas, envuélvelo en ""
          QUOTE_AWK=/tmp/quote_env.awk
          printf '%s\n' \
            'BEGIN{OFS="="}' \
            '/^[ \t]*#/ {print; next}' \
            '/^[ \t]*$/ {print; next}' \
            '/^[A-Za-z_][A-Za-z0-9_]*=/ {' \
            '  key=$1; val=substr($0, index($0,"=")+1)' \
            '  if (val ~ /^".*"$/)   { print key, val; next }' \
            '  if (val ~ /[ \t]/)    { gsub(/"/,"\\\"",val); print key, "\"" val "\""; next }' \
            '  print key, val; next' \
            '}' \
            '{print}' \
            > "$QUOTE_AWK"
          gawk -F= -f "$QUOTE_AWK" "$ENV_FILE" > /tmp/.env.q && mv /tmp/.env.q "$ENV_FILE"

          # 3) Dedup por CLAVE conservando la ÚLTIMA definición (semántica .env)
          DEDUP_AWK=/tmp/dedup_env.awk
          printf '%s\n' \
            '{ k=$1; a[k]=$0; idx[++n]=k }' \
            'END { for(i=1;i<=n;i++) if(!p[idx[i]]++) print a[idx[i]] }' \
            > "$DEDUP_AWK"
          gawk -F= -f "$DEDUP_AWK" "$ENV_FILE" > /tmp/.env.d && mv /tmp/.env.d "$ENV_FILE"

          # 4) Validación estricta (REGEX CORREGIDO; sin falsos positivos)
          #    a) línea válida si es comentario, vacía o KEY=...
          BAD=$(gawk '
            /^[ \t]*#/ || /^[ \t]*$/ || /^[ \t]*[A-Za-z_][A-Za-z0-9_]*=.*/ { next }
            { print NR ":" $0 }
          ' "$ENV_FILE" || true)

          #    b) comillas dobles desbalanceadas: cuenta " no escapadas
          UNBAL=$(gawk '
            /^[ \t]*#/ || /^[ \t]*$/ { next }
            {
              line=$0
              gsub(/\\"/,"", line)          # ignora \" escapadas
              n=gsub(/"/,"", line)          # cuenta comillas restantes
              if (n % 2 == 1) print NR ":" $0
            }
          ' "$ENV_FILE" || true)

          if [ -n "$BAD" ] || [ -n "$UNBAL" ]; then
            echo "❌ .env inválido:"
            [ -n "$BAD" ] && { echo "Líneas con formato inválido (no KEY=..., ni vacía/ni comentario):"; echo "$BAD"; }
            [ -n "$UNBAL" ] && { echo "Comillas dobles sin cerrar:"; echo "$UNBAL"; }
            echo "Contenido (primeras 200 líneas):"
            nl -ba "$ENV_FILE" | sed -n '1,200p'
            exit 1
          fi

          echo "✅ .env saneado y válido (build)"
      - name: Install PHP extensions (robust)
        shell: bash
        run: |
          set -Eeuo pipefail
          apt-get update && apt-get install -y curl git

          # Instalador comunitario: resuelve dependencias y habilita .ini automáticamente
          curl -fsSL https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions \
            -o /usr/local/bin/install-php-extensions
          chmod +x /usr/local/bin/install-php-extensions

          # IMAP en PHP 8.4 es PECL; el instalador ya lo maneja.
          install-php-extensions \
            soap mbstring gd intl zip bcmath exif sockets pdo_pgsql ldap imap pcntl bcmath exif intl mbstring redis

          # Verificaciones duras: si SOAP no está, falla aquí mismo
          php --ri soap >/dev/null
          php -m | grep -E '^soap$' >/dev/null
      - name: Install Node.js
        run: |
          apt-get update && apt-get install -y nodejs npm  && npm install   

      - name: Install Laravel Dependencies
        run: |
          composer install --no-interaction --prefer-dist --no-progress --optimize-autoloader
          php --ri soap >/dev/null || (echo "SOAP not enabled" && exit 1)
          composer update --no-interaction --with-all-dependencies    

      - name: Generate key
        run:  php artisan key:generate

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: kanonhian/bagisto-shop:latest
